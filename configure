#!/bin/sh

# This configure script written by Brian Callahan <bcallah@openbsd.org>
# and released into the Public Domain.

Makefile() {
  if [ -z "$cc" ] ; then
    cc=$CC
  fi
cat << EOF > Makefile
# This Makefile automatically generated by configure.

CC =		$cc
CFLAGS =	$cflags
EOF

if [ ! -z "$ldflags" ] ; then
cat << EOF >> Makefile
LDFLAGS =	$ldflags
EOF
fi

if [ ! -z "$vpath" ] ; then
cat << EOF >> Makefile

VPATH =		$vpath
EOF
fi

cat << EOF >> Makefile

PREFIX =	$prefix

PROG =	edx
OBJS =	$objs
LIBS =	$libs

all: \${OBJS}
	\${CC} \${LDFLAGS} -o \${PROG} \${OBJS} \${LIBS}

install:
	install -d \${DESTDIR}\${PREFIX}/bin
	install -c -m 755 \${PROG} \${DESTDIR}\${PREFIX}/bin

uninstall:
	rm -f \${DESTDIR}\${PREFIX}/bin/\${PROG}

test:
	echo "No tests"

clean:
	rm -f \${PROG} \${OBJS}

distclean: clean
	rm -f Makefile config.h \${PROG}.core
EOF
}

c99check() {
  cat << EOF > conftest.c
#include <stdio.h>
int main(void){for (long long i=0;i<1;i++)printf("%s",__DATE__);return 0;}
EOF
  $cc $cflags -std=c99 -o conftest.o -c conftest.c > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

cccheck() {
cat << EOF > conftest.c
int main(void){return 0;}
EOF
    $CC -o conftest.o -c conftest.c > /dev/null 2>&1
    $CC $ldflags -o conftest conftest.o > /dev/null 2>&1
    if [ $? -eq 0 ] ; then
      ./conftest
      if [ $? -eq 0 ] ; then
	rm -f conftest conftest.o conftest.c
	cc="$CC"
	return 0
      else
	echo "could not build working executables"
	echo "Please ensure your C compiler is a native compiler"
	exit 1
      fi
    else
      rm -f conftest conftest.o conftest.c
    fi

  for compiler in cc clang pcc tcc xlc lacc cparser ccomp kefir gcc ; do
cat << EOF > conftest.c
int main(void){return 0;}
EOF

    $compiler -o conftest.o -c conftest.c > /dev/null 2>&1
    $compiler $ldflags -o conftest conftest.o > /dev/null 2>&1

    if [ $? -eq 0 ] ; then
      ./conftest
      if [ $? -eq 0 ] ; then
	rm -f conftest conftest.o conftest.c
	cc="$compiler"
	return 0
      else
	echo "could not build working executables"
	echo "Please ensure your C compiler is a native compiler"
	exit 1
      fi
    else
      rm -f conftest conftest.o conftest.c
    fi
  done
  return 1
}

defaultcflagscheck() {
  cat << EOF > conftest.c
int main(void){return 0;}
EOF
  $cc $defaultcflags -o conftest.o -c conftest.c > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 1
  else
    rm -f conftest conftest.o conftest.c
    return 0
  fi
}

defaultgflagcheck() {
  cat << EOF > conftest.c
int main(void){return 0;}
EOF
  $cc $cflags -g -o conftest.o -c conftest.c > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 1
  else
    rm -f conftest conftest.o conftest.c
    return 0
  fi
}

defaultpipeflagcheck() {
  cat << EOF > conftest.c
int main(void){return 0;}
EOF
  $cc $cflags -pipe -o conftest.o -c conftest.c > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 1
  else
    rm -f conftest conftest.o conftest.c
    return 0
  fi
}

gnu99check() {
  cat << EOF > conftest.c
#include <stdio.h>
int main(void){for (long long i=0;i<1;i++)printf("%s",__DATE__);return 0;}
EOF
  $cc $cflags -std=gnu99 -o conftest.o -c conftest.c > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

noc99check() {
  cat << EOF > conftest.c
#include <stdio.h>
int main(void){for (long long i=0;i<1;i++)printf("%s",__DATE__);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

pledgecheck() {
  cat << EOF > conftest.c
#include <unistd.h>
int main(void){pledge(NULL,NULL);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

snprintfcheck() {
  cat << EOF > conftest.c
#include <stdio.h>
int main(void){snprintf(NULL,0,NULL);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

strlcatcheck() {
  cat << EOF > conftest.c
#include <string.h>
int main(void){strlcat(NULL,NULL,0);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

strlcpycheck() {
  cat << EOF > conftest.c
#include <string.h>
int main(void){strlcpy(NULL,NULL,0);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

x11check() {
  command -v pkg-config > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    pkg-config --exists x11
    if [ $? -eq 0 ] ; then
      cflags="$cflags $(pkg-config --cflags x11)"
      libs="$libs $(pkg-config --libs x11)"
      return 0
    else
      return 1
    fi
  else
    return 1
  fi
}

# Option variables
if [ ! -z "$PREFIX" ] ; then
  prefix="$PREFIX"
else
  prefix="/usr/local"
fi

defaultcflags="-O2"
objs="edx.o"
static=0
cross=0

os=$(uname -s)
if [ "x$os" = "xSunOS" ] ; then
  cpu=$(isainfo -k)
else
  cpu=$(uname -m)
fi

# Options
for opt
do
  case "$opt" in
    --prefix=*)
	prefix=${opt#*=}
	;;
    --cc=*)
	CC=${opt#*=}
	;;
    --cflags=*)
	CFLAGS=${opt#*=}
	;;
    --ldflags=*)
	LDFLAGS=${opt#*=}
	;;
    --disable-static|--enable-static)
	if [ "x$opt" = "x--enable-static" ] ; then
	  static=1
	else
	  static=0
	fi
	;;
    --optimize-size)
	defaultcflags="-Oz"
	;;
    --optimize-speed)
	defaultcflags="-Ofast"
	;;
    --help|-h)
	echo "Usage: configure [options]"
	echo ""
	echo "Options:"
	printf "  --help or -h            "
	echo "Display this help message"
	printf "  --prefix=PREFIX         "
	echo "Top level install directory is PREFIX [$prefix]"
	printf "  --cc=CC                 "
	echo "Use specified C compiler [default=cc]"
	printf "  --cflags=CFLAGS         "
	echo "Use specified CFLAGS [default=$defaultcflags]"
	printf "  --ldflags=LDFLAGS       "
	echo "Use specified LDFLAGS [default=\"\"]"
	printf "  --enable-static         "
	echo "Statically link executables [default=no]"
	printf "  --optimize-size         "
	echo "Aggressively optimize for size [default=no]"
	printf "  --optimize-speed        "
	echo "Aggressively optimize for speed [default=no]"
	exit 1
	;;
    *)
	;;
  esac
done

if [ ! -z "$CFLAGS" ] ; then
  cflags="$CFLAGS"
else
  cflags=""
fi

if [ ! -z "$LDFLAGS" ] ; then
  ldflags="$LDFLAGS "
else
  ldflags=""
fi

if [ $static -ne 0 ] ; then
  ldflags="$ldflags -static"
fi

if [ $cross -eq 1 ] ; then
  if [ -z "$CC" ] ; then
    echo "error: must specify a C compiler when cross compiling"
    exit 1
  fi
fi

printf "checking for C compiler... "
if [ $cross -eq 1 ] ; then
  echo "cross compilation detected"
  echo "warning: disabling toolchain checks because of cross compilation"
else
  cccheck
  if [ $? -ne 0 ] ; then
    echo "not found"
    echo "Please install a C compiler and re-run configure."
    exit 1
  else
    echo "$cc"
  fi
fi

if [ "x$cc" = "xvc" ] ; then
  if [ $cross -eq 0 ] ; then
    echo "using vbcc, setting CFLAGS to -g -O=990"
    cflags="-g -O=990"
  fi
fi

if [ "x$cflags" = "x" ] ; then
  printf "checking whether the compiler accepts %s... " $defaultcflags
  defaultcflagscheck
  if [ $? -eq 0 ] ; then
    echo "no"
    if [ "x$defaultcflags" = "x-Oz" ] ; then
      defaultcflags="-Os"
      printf "checking whether the compiler accepts %s... " $defaultcflags
      defaultcflagscheck
      if [ $? -eq 0 ] ; then
	echo "no"
      else
	cflags="$cflags $defaultcflags"
	echo "yes"
      fi
    fi
    if [ "x$defaultcflags" = "x-Ofast" ] ; then
      defaultcflags="-O3"
      printf "checking whether the compiler accepts %s... " $defaultcflags
      defaultcflagscheck
      if [ $? -eq 0 ] ; then
	echo "no"
      else
	cflags="$cflags $defaultcflags"
	echo "yes"
      fi
    fi
  else
    cflags="$cflag $defaultcflags"
    echo "yes"
  fi
fi

printf "checking whether the compiler accepts -pipe... "
defaultpipeflagcheck
if [ $? -eq 0 ] ; then
  echo "no"
else
  cflags="$cflags -pipe"
  echo "yes"
fi

printf "checking whether the compiler accepts -g... "
defaultgflagcheck
if [ $? -eq 0 ] ; then
  echo "no"
else
  cflags="$cflags -g"
  echo "yes"
fi

printf "checking for %s option to enable C99 features... " $cc
noc99check
if [ $? -ne 0 ] ; then
  gnu99check
  if [ $? -ne 0 ] ; then
    c99check
    if [ $? -ne 0 ] ; then
      echo "cannot compile C99"
      echo "You must have a C99 compiler to build pc!"
      exit 1
    else
      cflags="$cflags -std=c99"
      echo "-std=c99"
    fi
  else
    cflags="$cflags -std=gnu99"
    echo "-std=gnu99"
  fi
else
  echo "none needed"
fi

printf "checking for X11... "
x11check
if [ $? -eq 0 ] ; then
  echo "yes"
else
  echo "no"
  echo "warning: could not find X11"
  echo "You will need to manually set this with --cflags and --ldflags"
fi

if [ $cross -eq 0 ] ; then
  printf "checking for pledge... "
  pledgecheck
  if [ $? -eq 0 ] ; then
    cflags="$cflags -DHAVE_PLEDGE"
    echo "yes"
  else
    echo "no"
  fi
fi

if [ $cross -eq 0 ] ; then
  printf "checking for snprintf... "
  snprintfcheck
  if [ $? -eq 0 ] ; then
    echo "yes"
  else
    objs="$objs snprintf.o"
    echo "no"
  fi
fi

if [ $cross -eq 0 ] ; then
  printf "checking for strlcat... "
  strlcatcheck
  if [ $? -eq 0 ] ; then
    echo "yes"
  else
    objs="$objs strlcat.o"
    echo "no"
  fi
fi

if [ $cross -eq 0 ] ; then
  printf "checking for strlcpy... "
  strlcpycheck
  if [ $? -eq 0 ] ; then
    echo "yes"
  else
    objs="$objs strlcpy.o"
    echo "no"
  fi
fi

printf "checking for out-of-tree build... "
if [ "x$(dirname $0)" = "x." ] ; then
  echo "no"
elif [ "x$(dirname $0)" = "x$(pwd)" ] ; then
  echo "no"
else
  vpath="$(dirname $0)"
  cflags="$cflags -I$(pwd)"
  echo "yes"
fi

if [ ! -z "$cflags" ] ; then
  cflags=$(echo "$cflags" | xargs)
fi

if [ ! -z "$ldflags" ] ; then
  ldflags=$(echo "$ldflags" | xargs)
fi

if [ ! -z "$libs" ] ; then
  libs=$(echo "$libs" | xargs)
fi

printf "creating Makefile... "
Makefile
echo "done"
